<launch>

  <param name="robot_type" value="j2n6s300" />
  <param name="robot_connected" value="false" />
  <param name="/pick_place_demo/arm/solve_type" value="Manipulation2" />
  <param name="/pick_place_demo/arm/kinematics_solver_timeout" value="0.05" />

   <!-- these are the arguments you can pass this launch file, for example paused:=true -->  
  <arg name="kinova_robotType" default="j2n6s300"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="use_trajectory_controller" default="true"/>
  <arg name="is7dof" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find autonomous_eating)/worlds/full.world"/>
    <arg name="debug" value="false" />
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find autonomous_eating)/urdf/j2n6s300_camera.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!-- For the 6DOF -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" unless="$(arg is7dof)"
    args="-urdf -model $(arg kinova_robotName) -param robot_description
        -J $(arg kinova_robotType)_joint_1 0.0
        -J $(arg kinova_robotType)_joint_2 2.9
        -J $(arg kinova_robotType)_joint_3 1.3
        -J $(arg kinova_robotType)_joint_4 -2.07
        -J $(arg kinova_robotType)_joint_5 1.4
        -J $(arg kinova_robotType)_joint_6 0.0
        -J $(arg kinova_robotType)_joint_finger_1 1.0
        -J $(arg kinova_robotType)_joint_finger_2 1.0
        -J $(arg kinova_robotType)_joint_finger_3 1.0" />

  <!-- For the 7DOF -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" if="$(arg is7dof)"
    args="-urdf -model $(arg kinova_robotName) -param robot_description
        -J $(arg kinova_robotType)_joint_1 0.0
        -J $(arg kinova_robotType)_joint_2 2.9
        -J $(arg kinova_robotType)_joint_3 0.0
        -J $(arg kinova_robotType)_joint_4 1.3
        -J $(arg kinova_robotType)_joint_5 -2.07
        -J $(arg kinova_robotType)_joint_6 1.4
        -J $(arg kinova_robotType)_joint_7 0.0
        -J $(arg kinova_robotType)_joint_finger_1 1.0
        -J $(arg kinova_robotType)_joint_finger_2 1.0
        -J $(arg kinova_robotType)_joint_finger_3 1.0" />

  <!-- ros_control launch file -->
  <include file="$(find kinova_control)/launch/kinova_control.launch">
    <arg name="kinova_robotName" value="$(arg kinova_robotName)"/>
    <arg name="kinova_robotType" value="$(arg kinova_robotType)"/>
    <arg name="use_trajectory_controller" value="$(arg use_trajectory_controller)"/>
    <arg name="is7dof" value="$(arg is7dof)"/>
  </include>

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find j2n6s300_moveit_config)/launch/move_group_j2n6s300.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="joint_states_ns" value="/j2n6s300/joint_states"/>
    <arg name="controller_manager" value="j2n6s300_ros_control"/>
  </include>  

  <!-- ros-control Controller parameters-->  
  <rosparam file="$(find j2n6s300_moveit_config)/config/controllers_ros_control.yaml"/>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find j2n6s300_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!--  force robot into starting position  -->
  <node pkg="autonomous_eating" type="robot_pos_fix.py" name="robot_pos_fix"/>
</launch>
